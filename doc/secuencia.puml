@startuml DiagramaSecuencia
!pragma teoz true

skinparam participant {
    BackgroundColor #F5F5F5
    BorderColor #333366
    FontSize 14
}
skinparam actor {
    BackgroundColor #DDEEFF
    BorderColor #333366
    FontSize 14
}
skinparam sequenceArrowColor DarkSlateGray
skinparam sequenceLifeLineBorderColor #333366

actor Usuario as usuario #LightBlue
participant Main
participant PresentadorJuego
participant VistaJuego
participant Mundo
participant ManjeadorChunks
participant PersonajeJugador
participant Inventario
participant Camara
participant Mapa
participant Pygame

== Inicio del juego ==
usuario -> Main : main()
activate Main

Main -> PresentadorJuego : crear()
activate PresentadorJuego

Main -> VistaJuego : crear()
activate VistaJuego

Main -> Pygame : init()
activate Pygame

== Bucle principal ==
loop "Hasta cerrar juego"
    Main -> PresentadorJuego : manejar_eventos()
    PresentadorJuego -> VistaJuego : obtener_eventos()
    VistaJuego -> Pygame : event.get()
    VistaJuego <-- Pygame : eventos
    PresentadorJuego <-- VistaJuego : eventos
    Main <-- PresentadorJuego : eventos_filtrados

    alt Evento de salida
        PresentadorJuego -> Main : None (cerrar juego)
        break
    else
        Main -> PresentadorJuego : actualizar(dt, eventos)
        PresentadorJuego -> Mundo : actualizar(dt, eventos)
        activate Mundo

        Mundo -> PersonajeJugador : manejar_evento(evento)
        activate PersonajeJugador
        PersonajeJugador -> Inventario : actualizar(evento)
        deactivate Inventario
        deactivate PersonajeJugador

        Mundo -> Pygame : key.get_pressed()
        Mundo <-- Pygame : teclas
        Mundo -> PersonajeJugador : actualizar(teclas)
        PersonajeJugador -> ComponenteMover : actualizar(teclas)
        PersonajeJugador -> ComponenteAnimacion : actualizar()
        deactivate ComponenteMover
        deactivate ComponenteAnimacion

        Mundo -> ManjeadorChunks : actualizar_chunks_visibles(personaje)
        Mundo -> ManjeadorChunks : procesar_submatriz()
        ManjeadorChunks -> Mapa : obtener_chunk(chunk_x)
        deactivate Mapa

        Mundo -> Camara : actualizar(personaje.x, personaje.y)
        deactivate Camara

        PresentadorJuego -> VistaJuego : dibujar(objetos, personaje)
        activate VistaJuego
        VistaJuego -> Camara : actualizar(personaje.x, personaje.y)
        VistaJuego -> VistaJuego : dibujar_objetos_mapa(objetos)
        VistaJuego -> VistaJuego : dibujar_personaje_centrado(personaje)
        VistaJuego -> VistaJuego : dibujar_inventario(inventario)
        VistaJuego -> Pygame : display.flip()
        deactivate VistaJuego
        deactivate Mundo
    end
end

deactivate Pygame
deactivate PresentadorJuego
deactivate Main

note right: El ciclo termina cuando el usuario cierra la ventana o se detecta un evento de salida.
@enduml