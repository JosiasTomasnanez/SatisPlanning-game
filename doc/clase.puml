@startuml SatisPlanning
scale 1.5
skinparam linetype ortho

' Relaciones principales
__main__ -right-> PresentadorJuego : crea
PresentadorJuego -down-> Mundo : controla
PresentadorJuego -down-> VistaJuego : controla
VistaJuego -right-> Camara
VistaJuego -right-> Constantes
VistaJuego ..> pygame

Mundo -down-> Mapa
Mundo -down-> ManjeadorChunks
Mundo -down-> PersonajeJugador
Mundo -down-> Objeto
Mundo -right-> Constantes

ManjeadorChunks -down-> Mapa
ManjeadorChunks -down-> Suelo
ManjeadorChunks -right-> Constantes

Mapa -right-> Constantes
Mapa ..> perlin_noise
Mapa ..> random

PersonajeJugador --|> Personaje
Personaje --|> Objeto
PersonajeJugador -down-> ComponenteMover
PersonajeJugador -down-> ComponenteAnimacion
PersonajeJugador -down-> ComponenteInventario
PersonajeJugador -down-> Inventario
PersonajeJugador -down-> ComponenteDisparo

ComponenteMover --|> Componente
ComponenteAnimacion --|> Componente
ComponenteInventario --|> Componente
ComponenteInventario -down-> Inventario
ComponenteDisparo ..> obtener_posicion_mouse

Inventario -down-> Objeto
Inventario -right-> Constantes

Suelo --|> Objeto

Objeto ..> pygame

GestorDB ..> sqlite3
GestorDB ..> os

Camara -right-> Constantes

Constantes ..> pygame
Constantes ..> obtener_ruta_asset

' Nuevas clases/componentes
class ComponenteDisparo {
    + disparar(mundo)
}
ComponenteDisparo -down-> Proyectil

class Proyectil {
    + actualizar(dt)
    + dibujar(pantalla)
}

' Clases principales
class __main__ {
    + main()
}

class PresentadorJuego {
    + manejar_eventos()
    + actualizar(dt, eventos)
}

class VistaJuego {
    + dibujar(objetos, personaje)
    + dibujar_objetos_mapa(objetos)
    + dibujar_personaje_centrado(personaje)
    + dibujar_inventario(inventario)
}

class Mundo {
    + obtener_personaje()
    + actualizar(dt, eventos)
    + colisiona(hitbox, obj)
    + agregar_objeto(objeto, tangible)
    + obtener_objetos_a_dibujar()
}

class ManjeadorChunks {
    + cargar_chunks_iniciales(personaje)
    + iniciar_carga_progresiva(chunk_index, chunk_x)
    + procesar_submatriz()
    + actualizar_chunks_visibles(personaje)
    + obtener_chunks_visibles()
    + obtener_objetos_por_chunk(chunk_x)
    + agregar_objeto(objeto)
}

class Mapa {
    + obtener_chunk(chunk_x)
    - _generar_chunk(chunk_x)
}

class Personaje {
    + set_mundo(mundo)
    + actualizar(teclas)
}

class PersonajeJugador {
    + obtener_inventario()
    + set_mundo(mundo)
    + actualizar(teclas)
    + manejar_evento(evento)
}

class Inventario {
    + agregar_objeto(objeto)
    + obtener_item_actual()
    + seleccionar_barra_rapida(indice)
    + manejar_evento(evento)
    + soltar_item_seleccionado()
}

class Objeto {
    + dibujar(pantalla)
    + actualizar_posicion(x, y)
    + dibujar_con_desplazamiento(pantalla, dx, dy)
    + agregar_componente(componente)
    + notificar_colision(objeto)
    + actualizar(dt)
}

class Suelo {
    <<inherits>> Objeto
}

class Camara {
    + actualizar(objetivo_x, objetivo_y)
    + aplicar(x, y)
}

class Constantes <<constantes>> {
    + ANCHO : int
    + ALTO : int
    + TAMANIO_BLOQUE : int
    + FPS : int
    + FILAS : int
    + COLUMNAS : int
    + COLOR_FONDO : tuple
    + FUENTE
    + GRAVEDAD : float
    + FUERZA_SALTO : int
    + VELOCIDAD_PERSONAJE : int
    + COLORES : dict
    + TEXTURA_TIERRA : str
    + TEXTURA_PIEDRA : str
    + TEXTURA_PASTO : str
    + BLOQUES_SOLIDOS : set
    + HERRAMIENTAS : dict
    + CATEGORIAS : list
}

class Componente {
    + actualizar(dt)
}

class ComponenteMover {
    + set_mundo(mundo)
    + mover(teclas)
    + actualizar(teclas)
}

class ComponenteAnimacion {
    + notificar_movimiento()
    + actualizar()
}

class ComponenteInventario {
    + set_mundo(mundo)
    + actualizar(teclas)
}

class GestorDB {
    + insertar_jugador(...)
    + insertar_inventario(...)
    + cerrar()
}

' Extensiones y notas
note right of ComponenteDisparo
  Puede ser usado por cualquier personaje
  para disparar proyectiles.
end note

note right of Proyectil
  Ejemplo de objeto disparado.
  Puede tener lógica de colisión, daño, etc.
end note

@enduml